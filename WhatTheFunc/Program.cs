using System;
using System.Reflection;

namespace WhatTheFunc
{
    public class Program
    {
        public class Person
        {
            public int Id { get; set; }
            public string Name { get; set; }
            public int Age { get; set; }
            public DateTimeOffset CreatedDate { get; set; }
            public bool isActive { get; set; }
        }
        public class PersonDto
        {
            public string Name { get; set; }
            public int Age { get; set; }
        }

        public class CreatePersonDto
        {
            public int Id { get; set; } //Generated by the Database not the user!!
            public string Name { get; set; }
            public int Age { get; set; }
            public DateTimeOffset CreatedDate { get; set; } = DateTimeOffset.UtcNow;
            public bool isActive { get; set; } = true;

        }

        public static CreatePersonDto Seed_CreatePersonDto()
        {
            var newCreatePersonDto = new CreatePersonDto
            {
                //Database usually doesn Id's I'll set it for example purpose.
                Id = 1,
                Name = "John Smith",
                Age = 32,
                CreatedDate = DateTimeOffset.UtcNow
            };

            return newCreatePersonDto;
        }
        public static Person BuildMap_CreatePersonDto_ReturnPerson_ForDataBase(CreatePersonDto createDto)
        {
            var newPerson = new Person
            {
                //Database usually doesn Id's I'll set it for example purpose.
                Id = 1,
                Name = createDto.Name,
                Age = createDto.Age,
                CreatedDate = createDto.CreatedDate
            };

            return newPerson;
        }
        public static PersonDto BuildMap_PersonEntity_Returns_PersonDto(Person entity)
        {
            //  finds by Id. from database
            //var id = _context.Set<Person>().Find(entity.Id);
            var id = 1;

            // We want to Create the object to send back to the Client
            var resultPersonDto = new PersonDto
            {
                // Check if Id's Match!!
                Name = entity.Name,
                Age = entity.Age,
            };

            return resultPersonDto;
        }
        public static int Sum(int x, int y)
        {
            return x + y;
        }

        public static void Main(string[] args)
        {
            //----------SUPER BASIC examples----
            Console.WriteLine("Basic Func<int, int, out int>");

            Func<int, int, int> add = Sum;

            var result = add(10, 10);

            Console.WriteLine(result);

            // With Lambda
            Func<int> getSum = () => new Random().Next(1, 10);

            // or for a Juicy 1 Liner...
            Func<int, int, int> SumWithLambda = (x, y) => x + y;

            //------Person examples-----
            //  Maps CreatePersonDto -> Person
            var freshAccount = Seed_CreatePersonDto();
            Func<CreatePersonDto, Person> Map_Dto_ToEntity = BuildMap_CreatePersonDto_ReturnPerson_ForDataBase;

            var resultPersonEntity = Map_Dto_ToEntity(freshAccount);


            Console.WriteLine($"Database Entity: {resultPersonEntity}\n Id: {resultPersonEntity.Id}\n {resultPersonEntity.Name}\n {resultPersonEntity.Age}\n {resultPersonEntity.CreatedDate}");

            // Maps Person -> PersonDto
            Func<Person, PersonDto> Map_Entity_To_Dto = BuildMap_PersonEntity_Returns_PersonDto;

            var returnDto = Map_Entity_To_Dto(resultPersonEntity);
            Console.WriteLine($"Database Entity: {returnDto}\n {returnDto.Name}\n {returnDto.Age}\n");

            // Messing with Reflection hehexD
            //var types = resultPersonEntity.GetType();
            //var members = types.GetMembers();
            //var typeInfo = types.GetTypeInfo();
            //var fields = types.GetFields();
            //foreach (var field in fields)
            //    Console.WriteLine($"{field}");
            //foreach (var member in members)
            //    Console.WriteLine($"{member}");
            // Endo of Reflection playground
        }
    }
}
